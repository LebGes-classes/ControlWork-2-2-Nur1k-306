1)Что такое сериализация/дессериализация?

Сериализация – это процесс преобразования объекта в поток байтов для сохранения его состояния в файл, 
базу данных или для передачи по сети. Основная цель сериализации – это сохранение состояния объекта для последующего восстановления. 
В Java сериализация осуществляется с помощью интерфейса Serializable.

Дессериализация – это обратный процесс, который восстанавливает объект из потока байтов, 
созданного во время сериализации. Это позволяет восстановить объект в то же состояние, в котором он был сохранен.


2)Какая последовательность работы с потоком?

Работа с потоками обычно включает следующие этапы:

Открытие потока: Создание объекта потока для чтения или записи данных.
Чтение/запись данных: Использование методов для чтения из потока или записи в поток.
Закрытие потока: Закрытие потока для освобождения ресурсов и завершения операции.


3)Какие виды потоков существуют?

В Java существует несколько видов потоков:

Байтовые потоки (Byte Streams): Используются для чтения и записи байтовых данных. Примеры: InputStream, OutputStream, FileInputStream, FileOutputStream.
Символьные потоки (Character Streams): Используются для работы с текстовыми данными (символами). Примеры: Reader, Writer, FileReader, FileWriter.
Буферизированные потоки (Buffered Streams): Используются для улучшения производительности за счет буферизации операций ввода/вывода. 
Примеры: BufferedReader, BufferedWriter, BufferedInputStream, BufferedOutputStream.
Объектные потоки (Object Streams): Используются для сериализации и дессериализации объектов. Примеры: ObjectInputStream, ObjectOutputStream.


4)Чем отличается IO от NIO?

IO (Input/Output):
Блокирующий ввод/вывод: При выполнении операции чтения или записи поток блокируется до завершения операции.
Потоковая модель: IO использует потоки для чтения и записи данных.
Простота использования: IO API проще и интуитивно понятнее.
Меньшая производительность: Из-за блокировки и отсутствия масштабируемости.

NIO (New Input/Output):
Неблокирующий ввод/вывод: Поддерживает неблокирующие операции, что позволяет масштабировать приложения для высоких нагрузок.
Буферная модель: NIO использует буферы для чтения и записи данных, что позволяет более гибко управлять данными.
Каналы и селекторы: NIO использует каналы и селекторы для эффективного управления множеством соединений.
Высокая производительность: Подходит для разработки высоконагруженных сетевых приложений.